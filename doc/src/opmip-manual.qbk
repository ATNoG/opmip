[article OPMIP User Manual
	[quickbook 1.5]
	[version 0.2]
	[id manual]
	[copyright 2010-2012 Universidade Aveiro]
	[copyright 2010-2012 Instituto de Telecomunicações - Pólo Aveiro]
	[purpose How to use the OPMIP MAG and LMA applications]
	[authors [Santos, Bruno], [Manco, Filipe], [Guimarães, Carlos], [Figueiredo, Sérgio]]
]

[def __usage__     [link manual.usage usage]]
[def __opmip_mag__ [link manual.usage.mag opmip-mag]]
[def __opmip_lma__ [link manual.usage.lma opmip-lma]]
[def __mad_wifi__  [@http://madwifi-project.org/ MadWifi]]
[def __json__      [@http://www.json.org/ JSON]]
[def __boost__     [@http://www.boost.org/ BOOST]]
[def __iperf__     [@http://sourceforge.net/projects/iperf/ iperf]]
[def __tcpdump__   [@http://www.tcpdump.org/ tcpdump]]

[section:intro Introduction]

The Open Proxy Mobile IPv6 (OPMIP) is an implementation of the Proxy Mobile IPv6
[footnote RFC 5213 - [@http://tools.ietf.org/html/rfc5213]] (PMIPv6) standard.

The implementation of the PMIPv6 is provided by two applications:

* __opmip_mag__ - implements the Mobile Access Gateway (MAG)

* __opmip_lma__ - implements the Local Mobility Anchor (LMA)

[endsect]

[section:started Getting Started]

[section:reqs Requirements]

To use OPMIP, you will need the Linux kernel:

* version 2.6.30 or higher

* compiled with: *CONFIG_IPV6_SUBTREES*

* the following module must be loaded or compiled built-in: *ip6_tunnel*

[important You will most likely need to compile a custom kernel, since the
requirements are not meet on most distributions.]

Additionally, for the __opmip_mag__ application you will need a wireless
interface card configured and working as an Access Point.

[warning Currently, only wireless cards with __mad_wifi__ drivers are supported
because the __opmip_mag__ attach/detach event monitor driver is only implemented for
__mad_wifi__. But you can also implement your own driver, see
[link manual.driver Write an opmip-mag event driver].]

[endsect]

[section:setup Operating System Setup]

For both __opmip_mag__ and __opmip_lma__ applications, you will need to setup
IPv6 forwarding in the kernel.
Typically, this can be configured at your [^/etc/sysctl.conf] file. Edit it
and add the line:

[^net.ipv6.conf.all.forwarding=1]

[important Don't forget to reboot for the changes to take effect.]

[section:mag MAG]

All access links for all __opmip_mag__'s must have the same IPv6 link local
address. For example, you can setup all access links to use the address
[^ffe80::1], see __opmip_mag__ usage.

[note Currently, only network wireless cards can be used as access links,
see [link manual.started.reqs requirements]. Unless you implement your own
driver, see [link manual.driver Write an opmip-mag event driver].]

[endsect]

[section:lma LMA]

__opmip_lma__ adds static route entries to the routing tables for the mobile
nodes, the route manager software must be aware of this and propagate the route
entries to other routers. This can be accomplished with routing software, such
as [@http://www.quagga.net/ Quagga], that monitors the route table and
propagates static entries.

[endsect]

[endsect]

[section:install Installation]

We provide you debianized sources from which you can build a debian package.
If you choose to build OPMIP this way you can use any debian package managment
tool to install an uninstall OPMIP.

If you choose not to use debianized sources and build directly from the git
repository no installation script is provided. However, the provided
binaries are standalone, they can be put anywhere.

Either way you will have to manually configure the startup of the OPMIP as a
service if you wish.

[important The binaries require an additional file, the [link manual.started.nodedb node database].]

[endsect]

[section:nodedb Node Database]

The node database contains the database of LMA/MAG nodes, also known as router
nodes, and the mobile nodes database. It uses the __json__ format:

[teletype]``
	{
		"router-nodes" :
		[
			{
				"id"          : "node1",
				"ip-address"  : "2001:aaaa:bbbb:cccc::1",
				"ip-scope-id" : "2"
			},
			{
				"id"          : "node2",
				"ip-address"  : "2001:dddd:eeee:ffff::2",
				"ip-scope-id" : "2"
			}
		],

		"mobile-nodes" :
		[
			{
				"id"           : "mn1",
				"ip-prefix"    :
				[
					"2001:aaaa::/64"
				],
				"home-address" : "2001:aaaa::1",
				"link-address" :
				[
					"00:11:22:33:44:55"
				],
				"lma-id"       : "node1"
			},
			{
				"id"           : "mn2",
				"ip-prefix"    :
				[
					"2001:bbbb::/64"
				],
				"link-address" :
				[
					"00:12:23:34:45:56"
				],
				"lma-id"       : "node1"
			}
		]
	}
``

In the above example, we have a database with:

* two router nodes
* two mobile nodes

[table Router Node Entry
[[Key] [Description]]
[[id] [Router node identifier. This is used to find the entry in the database.]
]
[[ip-address] [The router node's IP address.]]
[[ip-scope-id] [The interface identifier for the router node's IP address.]]
]

[table Mobile Node Entry
[[Key] [Description]]
[[id] [Mobile Node identifier. This is used to find the entry in the database,
it is also used has the PMIPv6 Mobile Node identifier.]]
[[ip-prefix] [An array of prefixes, to assign to the mobile node via
stateless autoconfiguration.]]
[[home-address] [An IPv6 address to assign to the mobile node via DHCPv6.]]
[[link-address] [An array containing the mobile node interfaces link addresses.]]
[[lma-id] [The identifier of the LMA router node for this mobile node.]]
]

All fields are mandatory except mobile node's [^home-address].
See [link manual.started.nodedb.enabledhcp Enable DHCP].

See __usage__ on how to pass the node database to a router node.

[note When a router node bootstraps, it's entry is lookup in the database. The
entry must match the network interface configuration.]

[section:enabledhcp Enable DHCP]

OPMIP provides DHCPv6 configuration for mobile nodes.

DHCPv6 configuration is enabled for the mobile nodes with an [^home-address]
field and disabled for the ones without it. So, you should only add
[^home-address] field if you want to provide DHCPv6 for the mobile node.

[warning OPMIP doesn't support the full DHCPv6 protocol. Also OPMIP just
provide IPv6 not IPv4 configuration.]

[note As DHCPv6 doesn't allow you to provide a default gateway
address to mobile nodes router advertisements are still needed.]

[endsect]

[endsect]

[endsect]

[section:build_opmip Build OPMIP]

[section:buid_reqs Build Requirements]

To build OPMIP you will need:

* gcc version 4.5.2 or higer

* __boost__ libraries version 1.47

[endsect]

[section:workingdir Recomended Working Directory]

The following working directory is recommended:

[teletype]``
 ~/
 |
 +-- projects/
 |    |
 |    +-- boost_1_47_0/
 |    |
 |    `-- opmip/
 |
 `-- user-config.jam
``

[endsect]

[section:setup_boost Setup BOOST]

To properly setup __boost__ on your computer follow the next setps:

# Get __boost__ libraries
 # Download __boost__ libraries from
  * [@http://sourceforge.net/projects/boost/files/boost/1.47.0/boost_1_47_0.tar.bz2/download]
 # Unpack to [^~\/projects/boost_1_47_0]
  * [^cd ~\/projects]
  * [^tar --bzip2 -xf <path-to-downloaded-file>/boost_1_47_0.tar.bz2]
# Set Environment variables
 # Set [^BOOST_ROOT] environment variable
  * [^export BOOST_ROOT=~\/projects/boost_1_47_0/]
 # Maybe you want to put this in your [^.bashrc] file
# Build and install Boost.Build
 # First of all *DO NOT* build boost libraries (you don't need it)
 # Build Boost.Build
  * [^cd $BOOST_ROOT]
  * [^./bootstrap.sh]
 # Install
  * [^cp b2 /usr/local/bin]
  * [^mkdir /usr/share/boost-build]
  * [^cp -r tools/build/v2/* \/usr/share/boost-build/]


[important Make sure BOOST_ROOT is defined. If BOOST_ROOT isn't defined
__boost__ libraries must be in opmip sources parent directory. You can also
pass the location in command line with the option --boost-root=/path/to/boost instead of
setting the BOOST_ROOT environment variable.]

[endsect]

[section:opmip OPMIP]

There are two ways of building OPMIP:

* From the debianized sources provided
* From the sources got from the git repository

[important As __boost__ doesn't have an updated debian package you will have to install
and configure __boost__ following the steps [link manual.build_opmip.setup_boost above]
even if you choose to use the debianized sources.]

[section:debianized Build from debianized sources]

# Unpack opmip.tar.gz
 * [^cd ~/projects]
 * [^tar -xf <path-to-opmip.tar.gz>]
# Build debian package
 * [^cd opmip/opmip-0.2]
 * [^dpkg-buildpackage]
# Install the debian
 * [^cd ..]
 * [^dpkg -i opmip_0.2-1_<arch>.deb]

[endsect]

[section:git Build from git sources]

# Get OPMIP from the git repository
 * [^cd ~/projects]
 * [^git clone https://helios.av.it.pt/git/opmip]
# Build OPMIP
 * [^cd opmip]
 * [^b2]

The generated binaries are now under [^~\/projects/opmip/dist/].

[endsect]

[endsect]

[endsect]

[section:usage Usage]

[section:mag opmip-mag]

To get usage help, type at the command prompt: [^opmip-mag --help]

[table Command line options
[[Short Option] [Long Option]              [Description]]
[[-h]           [--help]                   [Display command line options]]
[[-i [~arg]]    [--id [~arg]]              [This node identifier on the node
   database. Defaults to the [^hostname]]]
[[-d [~arg]]    [--database [~arg]]        [Node database file. Defaults to
   [^node.db]]]
[[-l [~arg]]    [--log [~arg]]             [Optional log file. Defaults to the
   standard output]]
[[-e [~arg]]    [--driver [~arg]]          [Event driver to be used, available:
   `madwifi`, `dummy` or a custom driver .so]]
[[]             [--link-local-ip [~arg]]   [Link local IP address for all access
   links. Defaults to [^fe80::1], see [link manual.started.setup.mag MAG setup]]]
[[]             [--driver-options [~args]] [Driver specific options passed to
   driver.]]
]

The built-in driver __mad_wifi__ must receive a list of interfaces to listen for
events. You can pass it with [^--driver-options] or after the driver name. For
example:

``opmip-mag -e madwifi ath0``

The built-in dummy driver must receive the number of events to generate per
second. The frequency must be in the range [0.0001, 1000]. For example, to
generate 1 event/second:

``opmip-mag -e dummy 1``

You can also tell the dummy driver, after the frequency option, the mobile node
IDs from the database to impersonate. If you do not set this, the dummy driver will
impersonate all of them.

To use your own driver (see [link manual.driver Write an opmip-mag event driver])
the argument must be the [^.so] filename or the path to the file. For example:

``
opmip-mag -e mydriver.so
opmip-mag -e ./mydriver.so
``

In the first case [^mydriver.so] must be placed in one of the default
locations. In the second case the file is search in the current directory.

[endsect]

[section:lma opmip-lma]

To get usage help, type at the command prompt: [^opmip-lma --help]

[table Command line options
[[Short Option] [Long Option]        [Description]]
[[-h]           [--help]             [Display command line options]]
[[-i [~arg]]    [--id [~arg]]        [This node identifier on the node database.
   Defaults to the [^hostname]]]
[[-d [~arg]]    [--database [~arg]]  [Node database file. Defaults to [^node.db]]]
[[-l [~arg]]    [--log [~arg]]       [Optional log file. Defaults to the standard
   output]]
]

[endsect]

[endsect]

[section:driver Write an opmip-mag event driver]

__opmip_mag__ driver is the responsible for detect attach/dettach events and
pass the correspondent mobile node id to the __opmip_mag__ application.

OPMIP has built-in support for wireless cards with __mad_wifi__ drivers, and
also an implementation of a dummy driver that generate random events, useful
for experiments. But you can also write your own drivers to detect events,
for instance, from 802.1x, or any other technology.

To build your own driver you must write a C++ class that extends
`opmip::plugins::driver` and implement `start` and `stop` functions.

The code must be compiled as a shared library. The generated [^.so]
is then used by the __opmip_mag__ application (see [link manual.usage Usage]).

[note
Check `opmip/plugins/test/` for an example of how to implement a plugin.

You can also check `opmip/app/opmip-mag/drivers/` for the implementation of
the __mad_wifi__ driver.
]

[important `madwifi` and `dummy` cannot be used to name custom drivers has the
names are used by OPMIP to identify the built-in drivers.]

[section:icmp ICMP driver]
OPMIP-MAG ICMP driver options usage:
``
<local interface 1> <local interface N>
``

[h3 Testbed configuration]

[$./images/ICMP.png]

[*MAG 1]

* [*ath0:] HWaddr: 00:80:48:62:e7:bd
* [*control:] HWaddr: 00:03:1d:07:15:7f ; inet6 addr: 2001:aaaa:bbbb:cccc::4/64 Scope:Global

[*MAG 2]

* [*ath0:] HWaddr: 00:80:48:62:e7:e8
* [*control:] HWaddr: 00:03:1d:07:15:8e ; inet6 addr: 2001:aaaa:bbbb:cccc::1/64 Scope:Global

[*LMA]

* [*control:] HWaddr: 00:03:1d:07:15:73 ; inet6 addr: 2001:aaaa:bbbb:cccc::5/64 Scope:Global

[*MN]

* [*ath1:] HWaddr: 00:80:48:5f:a2:8b

[h3 Node database configuration]

[*node.db file]

The node database contains the database of LMA/MAG nodes, also known as
router nodes, and the mobile nodes database. It will be used by the MAGs
and the LMA nodes. It uses the JSON format:
``
{
        "router-nodes" :
        [
                {
                        "id"          : "node5",
                        "ip-address"  : "2001:aaaa:bbbb:cccc::5",
                        "ip-scope-id" : "4"
                },
                {
                        "id"          : "node4",
                        "ip-address"  : "2001:aaaa:bbbb:cccc::4",
                        "ip-scope-id" : "4"
                },
                {
                        "id"          : "node1",
                        "ip-address"  : "2001:aaaa:bbbb:cccc::1",
                        "ip-scope-id" : "4"
                }
        ],

        "mobile-nodes" :
        [
                {
                        "id"           : "mn1",
                        "ip-prefix"    :
                        [
                                "3001:aaaa:bbbb:cccc::/64"
                        ],
                        "link-address" :
                        [
                                "00:80:48:5f:a2:8b"
                        ],
                        "lma-id"       : "node5"
                }
        ]
}
``

[h3 Execution commands]

[*LMA:]
``
./opmip-lma -d node.db
``

[*MAG1:]
``
./opmip-mag -d node.db -e icmp ath0
``

[*MAG2:]
``
./opmip-mag -d node.db -e icmp ath0
``

[*MN:]

In order to enable the MN to send router solicitation messages, “/proc/sys/net/ipv6/conf/all/forwarding” must be set to 0 (zero).
Then, just connect the MN to one of the MAGs network.

[endsect]

[section:80221 IEEE 802.21 driver]
OPMIP-MAG IEEE 802.21 driver options usage:
``
"<local MIHF>" "<local interface 1> <local interface N>" ["<remote MIHF 1> <interface>, <remote MIHF N> <interface>"]
``

[section:80221MAG MAG co-located with PoA]

[h3 Testbed configuration]

[$./images/80221MAG.png]

[*MAG 1]

* [*ath0:] HWaddr: 00:80:48:62:e7:bd
* [*control:] HWaddr: 00:03:1d:07:15:7f ; inet6 addr: 2001:aaaa:bbbb:cccc::4/64 Scope:Global

[*MAG 2]

* [*ath0:] HWaddr: 00:80:48:62:e7:e8
* [*control:] HWaddr: 00:03:1d:07:15:8e ; inet6 addr: 2001:aaaa:bbbb:cccc::1/64 Scope:Global

[*LMA]

* [*control:] HWaddr: 00:03:1d:07:15:73 ; inet6 addr: 2001:aaaa:bbbb:cccc::5/64 Scope:Global

[*MN]

* [*ath1:] HWaddr: 00:80:48:5f:a2:8b

[h3 Configuration files]

[*node.db file]

The node database contains the database of LMA/MAG nodes, also known as
router nodes, and the mobile nodes database. It will be used by the MAGs
and the LMA nodes. It uses the JSON format:
``
{
        "router-nodes" :
        [
                {
                        "id"          : "node5",
                        "ip-address"  : "2001:aaaa:bbbb:cccc::5",
                        "ip-scope-id" : "4"
                },
                {
                        "id"          : "node4",
                        "ip-address"  : "2001:aaaa:bbbb:cccc::4",
                        "ip-scope-id" : "4"
                },
                {
                        "id"          : "node1",
                        "ip-address"  : "2001:aaaa:bbbb:cccc::1",
                        "ip-scope-id" : "4"
                }
        ],

        "mobile-nodes" :
        [
                {
                        "id"           : "mn1",
                        "ip-prefix"    :
                        [
                                "3001:aaaa:bbbb:cccc::/64"
                        ],
                        "link-address" :
                        [
                                "00:80:48:5f:a2:8b"
                        ],
                        "lma-id"       : "node5"
                }
        ]
}
``

[*Link SAP configuration file]
``
[link]
id=link1
port = 1235
 tec = 802_11
link_addr_list = ath0 00:80:48:62:e7:bd
event_list = link_detected, link_up, link_down, link_parameters_report, link_going_down, link_handover_imminent, link_handover_complete

[mihf]
ip=127.0.0.1
local_port=1025
``

[*MAG 1 MIHF configuration file] (for the MAG 2 MIHF the configuration file is identical)
``
[mihf]
id = mihf1
local_port = 1025
remote_port = 4551
transport = udp
``

[h3 Execution commands]

[*LMA:]
``
./opmip-lma -d node.db
``

[*MAG 1:]
``
./odtone-mihf --conf.file=./odtone.conf
./link_sap_icmp --conf.file=./link_sap_icmp.conf
./opmip-mag -d node.db -e ieee802.21 mihf1 "control ath0"
``

[*MAG 2:]
``
./odtone-mihf --conf.file=./odtone.conf
./link_sap_icmp –conf.file=./link_sap_icmp.conf
./opmip-mag -d node.db -e ieee802.21 mihf1 "control ath0"
``

[*MN:]

In order to enable the MN to send router solicitation messages, “/proc/sys/net/ipv6/conf/all/forwarding” must be set to 0 (zero).
Then, just connect the MN to one of the MAGs network.

[endsect]

[section:80221MAGPoA MAG and PoA in different entities]

[h3 Testbed configuration]

[$./images/80221_MAG-POA.png]

[*MAG 1]

* [*ath0:] HWaddr: 00:80:48:62:e7:bd
* [*control:] HWaddr: 00:03:1d:07:15:7f ; inet6 addr: 2001:aaaa:bbbb:cccc::4/64 Scope:Global

[*MAG 2]

* [*ath0:] HWaddr: 00:80:48:62:e7:e8
* [*control:] HWaddr: 00:03:1d:07:15:8e ; inet6 addr: 2001:aaaa:bbbb:cccc::1/64 Scope:Global

[*LMA]

* [*control:] HWaddr: 00:03:1d:07:15:73 ; inet6 addr: 2001:aaaa:bbbb:cccc::5/64 Scope:Global

[*MN]

* [*ath1:] HWaddr: 00:80:48:5f:a2:8b

[h3 Configuration files]

[*node.db file]

The node database contains the database of LMA/MAG nodes, also known as
router nodes, and the mobile nodes database. It will be used by the MAGs
and the LMA nodes. It uses the JSON format:
``
{
        "router-nodes" :
        [
                {
                        "id"          : "node5",
                        "ip-address"  : "2001:aaaa:bbbb:cccc::5",
                        "ip-scope-id" : "4"
                },
                {
                        "id"          : "node4",
                        "ip-address"  : "2001:aaaa:bbbb:cccc::4",
                        "ip-scope-id" : "4"
                },
                {
                        "id"          : "node1",
                        "ip-address"  : "2001:aaaa:bbbb:cccc::1",
                        "ip-scope-id" : "4"
                }
        ],

        "mobile-nodes" :
        [
                {
                        "id"           : "mn1",
                        "ip-prefix"    :
                        [
                                "3001:aaaa:bbbb:cccc::/64"
                        ],
                        "link-address" :
                        [
                                "00:80:48:5f:a2:8b"
                        ],
                        "lma-id"       : "node5"
                }
        ]
}
``


[*Link SAP configuration file]
``
[link]
id=link1
port = 1235
 tec = 802_11
link_addr_list = ath0 00:80:48:62:e7:bd
event_list = link_detected, link_up, link_down, link_parameters_report, link_going_down, link_handover_imminent, link_handover_complete

[mihf]
ip=127.0.0.1
local_port=1025
``

[*MAG 1 MIHF configuration file] (for the MAG 2 MIHF the configuration file is identical)
``
[mihf]
id = mihf1
local_port = 1025
remote_port = 4551
peers = poa1_mihf 10.110.1.2 4551 udp
transport = udp
``

[*PoA 1 MIHF configuration file] (for the MAG 2 MIHF the configuration file is identical)
``
[mihf]
id = poa1_mihf
local_port = 1025
remote_port = 4551
peers = mihf1 10.110.1.4 4551 udp
transport = udp
``

[h3 Execution commands]

[*LMA:]
``
./opmip-lma -d node.db
``

[*PoA 1:]
``
./odtone-mihf --conf.file=./odtone.conf
./link_sap_icmp --conf.file=./link_sap_icmp.conf
``

[*PoA 2:]
``
./odtone-mihf --conf.file=./odtone.conf
./link_sap_icmp --conf.file=./link_sap_icmp.conf
``

[*MAG 1:]
``
./odtone-mihf --conf.file=./odtone.conf
./opmip-mag -d node.db -e ieee802.21 mihf1 "control ath0" “poa1_mihf control”
``

[*MAG 2:]
``
./odtone-mihf --conf.file=./odtone.conf
./opmip-mag -d node.db -e ieee802.21 mihf1 "control ath0" “poa2_mihf control”
``

[*MN:]

In order to enable the MN to send router solicitation messages, “/proc/sys/net/ipv6/conf/all/forwarding” must be set to 0 (zero).
Then, just connect the MN to one of the MAGs network.

[endsect]

[endsect]

[endsect]

[section:experiments Experiments]

This section shows how to setup two experiments that allow you to test OPMIP in
two diferent scenarios.

[*This are only examples and obviously other experiments are possible.]

[section:basics Basics]

The following experiments test handover between two APs using a single homed and
a multi homed mobile node.

To run the experiments you will need:

* Three computers configured to run OPMIP applications (router nodes)
 * Two of the computers will run __opmip_mag__ application, so they need a
 wireless interface
 * Both MAG computers need to be connected to LMA, but don't need to be
 connected to each other
* A computer to simulate the mobile node
  * The mobile node needs one wireless interface for the first experiment and
  two wireless interfaces for the second experiment
  * It also needs a DHCP client that supports IPv6
* __iperf__ software

[note IPv6 Forwarding: 

In order to allow MN to obtain the assigned HoA (and not act like a router), you need to disable IPv6 forwarding at the attaching MN interface:

[teletype]``
sysctl net.ipv6.conf.ath1.forwarding=0
``
]

[note Stateful Address Configuration: 

If you wish to obtain the HoA defined in the node.db, using the Routing Advertisements from MAG, you need to run DHCP in the MN. Besides, you need to disable autoconfiguration (i.e. configuration based on the interface MAC address) using the following command at the MN:

[teletype]``
sysctl -w net.ipv6.conf.eth1.autoconf=0
``
]

In these experiments:

* We're working with root access on the machines
* OPMIP applications are somewhere in [^PATH] and node database (named [^node.db])
are in the home directory that is the current working directory
* We use the following node database:
[teletype]``
{
	"router-nodes" :
	[
		{
			"id"          : "lma1",
			"ip-address"  : "2001::1:1",
			"ip-scope-id" : "4"
		},
		{
			"id"          : "mag1",
			"ip-address"  : "2001::2:1",
			"ip-scope-id" : "4"
		},
		{
			"id"          : "mag2",
			"ip-address"  : "2001::2:2",
			"ip-scope-id" : "4"
		},
	],

	"mobile-nodes" :
	[
		{
			"id"           : "mn1",
			"ip-prefix"    :
			[
				"3001:aaaa:bbbb:cccc::/64",
			],
			"home-address" : "3001:aaaa:bbbb:cccc::1",
			"link-address" :
			[
				"00:00:00:00:00:00",
				"00:00:00:00:00:00"
			],
			"lma-id"       : "lma1"
		}
	]
}
``
 * Don't forget to change the mobile nodes' link addresses according to your system
* We're using the built-in __mad_wifi__ driver
* We follow the next conventions:
 * LMA identify the computer running __opmip_lma__ application
 * MAG[~x] where [~x] is a number identify a computer running __opmip_mag__ application
 * MAG[~x] access point SSID is OPMIP_MAGx
 * Computers running OPMIP applications are routers
 * MAG wireless cards are named [^ath0]
 * Mobile node wireless cards are named [^ath0] and [^ath1]

First steps:

# Build OPMIP
# Install OPMIP, if you're using debian package, or copy the binaries (__opmip_lma__ and
 __opmip_mag__) to somewhere in your [^PATH] otherwise
# Copy [^node.db] file to the routers (LMA, MAG1 and MAG2)
# Install __iperf__ software on mobile node and LMA
# Configure the routers according to the [link manual.started Getting Started] section

[important Make sure the node database is consistent in all router nodes, and
the nodes are configured accordingly to the database.]

[endsect]

[section:exp1 Experiment 1]

This experiments test an handover between two APs using a single homed mobile node.

To run this experiment follow the next steps (first check
[link manual.experiments.basics Basic setup] above)

# Start __opmip_lma__ application in LMA
 * [^opmip-lma -d node.db]
# Start __opmip_mag__ application in both MAGs
 * [^opmip-mag -e madwifi ath0 ]
# Start __iperf__ server in LMA
 * [^iperf -V -s]
# Attach the mobile node to the MAG1 Access Point
 * [^iwconfig ath0 essid OPMIP_MAG1]
# Start __iperf__ client
 * run it for some time so you can run the all experiment, we'll use 10000 seconds
 * [^iperf -V -c 2001::1:1 -t 10000]
# You can check that packets are flowing with a packet capture tool like __tcpdump__
# Attach the mobile node to the MAG2 Access Point
 * [^iwconfig ath0 essid OPMIP_MAG2]
# You can check that after a short delay packets are again flowing between server
 and client

[important Make sure that __iperf__ client binds to the ip address autoconfigured by
the mobile node. If you need use [^-B] modifier to force the bind.]

[endsect]

[section:exp2 Experiment 2]

This experiments test an handover between two APs using a multi homed mobile node.
In order to allow this experiment we'll need to use DHCP.

[important Multihoming support is a research area on which we are currently working.
This experiment's only purpose is to demonstrate OPMIP's current capabilities of
supporting multihoming. Expect some improvements in a near future.

For example, there are no easy way to make a client remove a previous lease from DHCP.
We are currently researching on how to make the client drop the lease instead
of make the user remove it himself/herself.]

To run this experiment follow the next steps (first check
[link manual.experiments.basics Basic setup] above)

# Start __opmip_lma__ application in LMA
 * [^opmip-lma -d node.db]
# Start __opmip_mag__ application in both MAGs
 * [^opmip-mag -e madwifi ath0 ]
# Start __iperf__ server in LMA
 * [^iperf -V -s]
# Attach the mobile node's [^ath0] interface to the MAG1 Access Point
 * [^iwconfig ath0 essid OPMIP_MAG1]
# Get an ip addres through DHCPv6
 * [^dhclient -6 ath0]
# Start __iperf__ client
 * run it for some time so you can run the all experiment, we'll use 10000 seconds
 * [^iperf -V -c 2001::1:1 -t 10000]
# You can check that packets are flowing with a packet capture tool like __tcpdump__
# Attach the mobile node's [^ath1] interface to the MAG2 Access Point
 * [^iwconfig ath1 essid OPMIP_MAG2]
# Release the previous lease manualy
 * [^rm /var/lib/dhcp/dhclient6.leases]
# Get ip address for [^ath1]
 * [^dhclient -6 ath1]
# Dettach and turn down mobile node's [^ath0] interface
 * [^iwconfig ath0 essid _]
 * [^ifconfig ath0 down]
# You can check that packets are now flowing through [^ath1] interface

[important Make sure that __iperf__ client binds to the ip address autoconfigured by
the mobile node. If you need use [^-B] modifier to force the bind.]

[endsect]

[endsect]

[section:changelog Changelog]

[*OPMIP 0.3 - Open Proxy Mobile IPv6]

* Add MAG support for IEEE 802.21 driver
* Support tunnel global address
* Improve robustness of OPMIP code
* Several bug fixes
* Update and improve documentation
* New OPMIP website (http://atnog.av.it.pt/opmip)

[endsect]
